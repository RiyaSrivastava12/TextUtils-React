{"version":3,"sources":["components/Alert.js","components/About.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","className","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","About","useState","color","backgroundColor","myStyle","setStyle","btnText","setBtnText","style","id","onClick","border","Navbar","mode","to","title","aboutText","toggleMode","htmlFor","TextForm","text","setText","heading","value","onChange","event","target","rows","newtext","showAlert","trim","document","getElementById","select","navigator","clipboard","writeText","split","length","defaultProps","App","setMode","setAlert","message","setTimeout","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.8ab62fba.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word) =>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React, {useState} from 'react'\r\n\r\nexport default function About() {\r\n\r\n    const [myStyle , setStyle] = useState(\r\n        {\r\n            color: 'black',\r\n            backgroundColor: 'white'\r\n        }\r\n    )\r\n    const [btnText , setBtnText] = useState(\"Enable Dark Mode\")\r\n\r\n    const toggleStyle = () =>{\r\n        if(myStyle.color === 'black'){\r\n            setStyle({\r\n                color: 'white',\r\n                backgroundColor: 'black',\r\n                border: '0.5px solid white'\r\n            })\r\n            setBtnText(\"Enable Light Mode\");\r\n        }\r\n        else{\r\n            setStyle({\r\n                color: 'black',\r\n                backgroundColor: 'white'\r\n            })\r\n            setBtnText(\"Enable Dark Mode\");\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"container\" style={myStyle}>\r\n        <h1 className=\"my-3\">About Us</h1>\r\n        <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\r\n        <div className=\"accordion-item\" style={myStyle}>\r\n          <h2 className=\"accordion-header\" id=\"headingOne\">\r\n            <button className=\"accordion-button\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n              Accordion Item #1\r\n            </button>\r\n          </h2>\r\n          <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n            <div className=\"accordion-body\">\r\n              <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\" style={myStyle}>\r\n          <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n            <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n              Accordion Item #2\r\n            </button>\r\n          </h2>\r\n          <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n            <div className=\"accordion-body\">\r\n              <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\" style={myStyle}>\r\n          <h2 className=\"accordion-header\" id=\"headingThree\">\r\n            <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n              Accordion Item #3\r\n            </button>\r\n          </h2>\r\n          <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n            <div className=\"accordion-body\">\r\n              <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <button onClick={toggleStyle} className=\"btn btn-primary my-3\">{btnText}</button>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n        </li>\r\n      </ul>\r\n      {/*\r\n      <form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n      </form>\r\n      */}\r\n      <div className={`form-check form-switch text-${props.mode==='light'?'dark' : 'light'}`}>\r\n        <input className=\"form-check-input \" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n        <label className=\"form-check-label \" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n    )\r\n}\r\nNavbar.propTypes={ \r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: 'Set title here',\r\n    aboutText: 'About'\r\n}\r\n","import React,{useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const handleUpClick = () => {\r\n      //  console.log(\"uppercase was clicked\" + text);  \r\n        let newtext= text.toUpperCase();\r\n        setText(newtext);\r\n        if(newtext==='')\r\n        {\r\n            props.showAlert(\"Enter text\",\"alert\")\r\n        }\r\n        else{\r\n            props.showAlert(\"Converted to uppercase \",\"success\")\r\n        }\r\n        \r\n    }\r\n    const handleLoClick = () => {\r\n        //  console.log(\"uppercase was clicked\" + text);  \r\n          let newtext= text.toLowerCase();\r\n          setText(newtext);\r\n          props.showAlert(\"Converted to lowercase \",\"success\")\r\n      }\r\n      const handleClearClick = () => {\r\n          let newtext= '';\r\n          setText(newtext);\r\n          props.showAlert(\"text cleared\",\"success\")\r\n      }\r\n      const handlespaces = () => {\r\n        let newtext= text.trim();\r\n        setText(newtext);\r\n        props.showAlert(\"Extra spaces cleared \",\"success\")\r\n    }\r\n    \r\n    const handleCopy = () => {\r\n        let newtext= document.getElementById(\"myBox\");\r\n        newtext.select();\r\n        navigator.clipboard.writeText(newtext.value);\r\n        props.showAlert(\"Text copied\",\"success\")\r\n    }\r\n    const handleOnChange = (event) => {\r\n       // console.log(\"on change\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const [text,setText] = useState('');\r\n    \r\n    return (\r\n        <>\r\n            <div className=\"container\" style ={{color :props.mode==='dark'?'white' : 'black'}}>\r\n                <h1>{props.heading} </h1>\r\n                <textarea className=\"form-control\" value={text} style ={{backgroundColor :props.mode==='dark'?'black' : 'white' , color :props.mode==='dark'?'white' : 'black' }} onChange={handleOnChange} id=\"myBox\" rows=\"8\"></textarea>\r\n                <button className=\"btn btn-primary my-3\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n                <button className=\"btn btn-primary my-3 mx-3\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n                <button className=\"btn btn-primary my-3 \" onClick={handleClearClick}>Clear Text</button>\r\n                <button className=\"btn btn-primary my-3 mx-3\" onClick={handlespaces}>Trim Whitespaces</button>\r\n                <button className=\"btn btn-primary my-1 \" onClick={handleCopy}>Copy</button>\r\n            </div>\r\n            <div className=\"container my-3\" style ={{color :props.mode==='dark'?'white' : 'black'}}>\r\n                <h2>Your text summary </h2>\r\n                <p> {text.split(\" \").length}  words and {text.length} characters</p>\r\n                <p> {0.008*text.split(\" \").length}  minutes read</p>\r\n                <h2> Preview</h2>\r\n                <p> {text.length>0?text:\"Enter something in the textbox above to preview it here\"} </p>\r\n            </div>\r\n      </>\r\n        \r\n    )\r\n}\r\n\r\n","\nimport { useState } from 'react';\nimport './App.css';\nimport Alert from './components/Alert';\nimport About from './components/About'; \nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport{\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n\n\nfunction App() {\n  const [mode , setMode] = useState('light');\n  const [alert , setAlert] = useState(null);\n\n  const showAlert = (message,type) => {\n      setAlert({\n        msg: message ,\n        type: type\n      })\n      setTimeout(()=>{\n        setAlert(null);\n      },1500);\n\n  }\n  const toggleMode = () =>{\n    if(mode === 'light'){\n      document.body.style.backgroundColor = 'grey';\n      showAlert(\"Darkmode has been enabled\",\"success\");\n      setMode('dark');\n      document.title='TextUtils - DarkMode'\n      \n    }\n    else\n    {\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Lightmode has been enabled\",\"success\");\n      setMode('light');\n      document.title='TextUtils - LightMode'\n    }\n  }\n  return (\n    <>\n    <Router>\n   <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode}/>\n   <Alert alert={alert}/>\n   \n   <div className=\"container my-3\">\n   <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/\">\n          <TextForm showAlert={showAlert} heading=\"Enter text to analyze\" mode={mode}/>\n          </Route>\n        </Switch>\n   \n   </div>\n   </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}